<?php
require_once "vendor/autoload.php";

use TelegramBot\Api\BotApi;
use TelegramBot\Api\Client;
use TelegramBot\Api\InvalidJsonException;
use TelegramBot\Api\Types\ReplyKeyboardMarkup;
use TelegramBot\Api\Types\Update;

class MyClient extends Client {

    public function run() {
        $keyboard = new ReplyKeyboardMarkup([
            ['/help', '/posts']
        ], null, true);

        //команда для start
        $this->command('start', function ($message) use ($keyboard) {
            $answer = 'Добро пожаловать!';
            $this->api->sendMessage($message->getChat()->getId(), $answer, null, false, null, $keyboard);
        });

        //команда для помощи
        $this->command('help', function ($message) {
            $answer = '
                Команды:
                    /help - вывод справки
                    /posts - отображение последних статей
            ';

            $keyboard = new \TelegramBot\Api\Types\Inline\InlineKeyboardMarkup([
                [
                    ['text' => 'www.telegram.org', 'url' => 'https://www.telegram.org/']
                ]
            ]);

            /**
             * @var TelegramBot\Api\Types\Message $message
             */
            $this->api->sendMessage($message->getChat()->getId(), $answer, null, false, null, $keyboard);
        });

        //команда отображения медиа
        $this->command('posts', function ($message) {
            $html = simplexml_load_file('https://netology.ru/blog/feed');

            $answer = '';
            foreach ($html->channel->item as $item) {
                $answer .= "\xE2\x9E\xA1 " . $item->title . " (<a href='" . $item->link . "'>читать</a>)\n\n";
            }

            /**
             * @var TelegramBot\Api\Types\Message $message
             */
            $this->api->sendMessage($message->getChat()->getId(), $answer, 'HTML');
        });

        parent::run(); // TODO: Change the autogenerated stub
    }
}

$token = '1178456278:AAEw93uhOVW7qL7n6vbE-gmGH2YwA0X03Rk';
try {
    $client = (new MyClient($token))->run();
} catch (InvalidJsonException $e) {
    $e->getMessage();
}
